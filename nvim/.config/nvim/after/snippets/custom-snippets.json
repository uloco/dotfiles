{
  "React Native Stack Screen (TS)": {
    "prefix": "rn-screen",
    "body": [
      "import { StackScreenProps } from \"@react-navigation/stack\";",
      "import React from \"react\";",
      "import { ScrollView, StyleSheet, Text, View, ViewStyle } from \"react-native\";",
      "import { SafeAreaView } from \"react-native-safe-area-context\";",
      "import { InAppParams } from \"../navigation/InAppNavigator\";",
      "",
      "type Props = StackScreenProps<InAppParams, \"${TM_FILENAME_BASE}\">",
      "",
      "export type ${TM_FILENAME_BASE}Params = {}",
      "",
      "export const ${TM_FILENAME_BASE} = (props: Props) => {",
      "  return (",
      "    <View style={styles.container}>",
      "      <ScrollView style={styles.scrollView}>",
      "        <SafeAreaView>",
      "          <Text>${TM_FILENAME_BASE}${0}</Text>",
      "        </SafeAreaView>",
      "      </ScrollView>",
      "    </View>",
      "  );",
      "};",
      "",
      "type Styles = {",
      "  container: ViewStyle;",
      "  scrollView: ViewStyle;",
      "};",
      "",
      "const styles = StyleSheet.create<Styles>({",
      "  container: { height: \"100%\"},",
      "  scrollView: { backgroundColor: \"red\"},",
      "});",
      ""
    ]
  },
  "React Native Functional Component (TS)": {
    "prefix": "rn-component",
    "body": [
      "import React from \"react\";",
      "import { StyleSheet, View, Text, ViewStyle } from \"react-native\";",
      "",
      "type Props = {",
      "  style?: ViewStyle;",
      "};",
      "",
      "export const ${TM_FILENAME_BASE} = (props: Props) => {",
      "  return (",
      "    <View style={[styles.container, props.style]}>",
      "      <Text>${TM_FILENAME_BASE}${0}</Text>",
      "    </View>",
      "  );",
      "};",
      "",
      "type Styles = {",
      "  container: ViewStyle;",
      "};",
      "",
      "const styles = StyleSheet.create<Styles>({",
      "  container: {}",
      "});",
      ""
    ]
  },
  "Async Thunk API Slice": {
    "prefix": "rn-api-slice",
    "body": [
      "export const ${1:name}SliceKey = \"${1:name}\";",
      "export type ${1/(.)/${1:/upcase}/}SliceState = ApiSliceProp<${1/(.)/${1:/upcase}/}${2|Query,Mutation|}>;",
      "const initialState: ${1/(.)/${1:/upcase}/}SliceState = {};",
      "",
      "export const ${1:name} = createAsyncThunk<",
      "    ${1/(.)/${1:/upcase}/}${2|Query,Mutation|},",
      "    ${1/(.)/${1:/upcase}/}${2|Query,Mutation|}Variables,",
      "  ThunkApiConfig",
      ">(`\\${${1:name}SliceKey}/${1:name}`, gqlThunk(${1/(.)/${1:/upcase}/}));",
      "",
      "export const ${1:name}Slice = createSlice({",
      "  name:${1:name}SliceKey,",
      "  initialState,",
      "  reducers: {},",
      "  extraReducers: (builder) => {",
      "    builder",
      "      .addCase(${1:name}.pending, (state) => {",
      "        state.error = undefined;",
      "        state.status = \"pending\";",
      "      })",
      "      .addCase(${1:name}.fulfilled, (state, action) => {",
      "        state.error = undefined;",
      "        state.status = \"fulfilled\";",
      "        state.data = action.payload;",
      "      })",
      "      .addCase(${1:name}.rejected, (state, action) => {",
      "        state.status = \"rejected\";",
      "        state.error = action.payload;",
      "      })",
      "      .addCase(logoutAction, (state) => {",
      "        state.data = undefined;",
      "        state.error = undefined;",
      "        state.status = undefined;",
      "      });",
      "  },",
      "});",
      "",
      "export const select${1/(.)/${1:/upcase}/} = (",
      "  state: RootState",
      "): ApiSelectorProps<${1/(.)/${1:/upcase}/}${2|Query,Mutation|}> =>",
      "  apiSelector(state?.[${1:name}SliceKey]);"
    ]
  }
}
